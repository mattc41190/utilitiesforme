"use strict";
var helpers = require("../../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = void 0;
  var _react = _interopRequireWildcard(require("react"));
  var _calculateDuration = require("./lib/calculate-duration");
  var _s2 = $RefreshSig$();
  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache() {
      return cache;
    };
    return cache;
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {
        "default": obj
      };
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || (/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/).test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !((Symbol.iterator in Object(arr)))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  var DEFAULT_DATES = (0, _calculateDuration.getDefaultDates)();
  var DEFAULT_DATE_DISPLAY_DATA = [{
    label: 'christmas',
    title: 'Christmas 🎅',
    classColorName: 'success'
  }, {
    label: 'thanksgiving',
    title: 'Thanksgiving 🦃',
    classColorName: 'warning'
  }, {
    label: 'independenceDay',
    title: 'July Fourth 🦅',
    classColorName: 'danger'
  }, {
    label: 'halloween',
    title: 'Halloween 🎃',
    classColorName: 'dark'
  }, {
    label: 'mlkDay',
    title: 'Martin Luther King Jr Day 🤝',
    classColorName: 'secondary'
  }, {
    label: 'valentinesDay',
    title: 'Valentines Day 💖',
    classColorName: 'outline-dark'
  }, {
    label: 'memorialDay',
    title: 'Memorial Day 🇺🇸',
    classColorName: 'primary'
  }, {
    label: 'laborDay',
    title: 'Labor Day 💪',
    classColorName: 'info'
  }, {
    label: 'boxingDay',
    title: 'Boxing Day 🥊',
    classColorName: 'secondary'
  }, {
    label: 'newYearsDay',
    title: 'New Years Day 🎆',
    classColorName: 'dark'
  }];
  var getDateUIData = function getDateUIData(label) {
    var defaultUIDateInfo = {
      classColorName: 'primary',
      title: 'Custom Date'
    };
    var uiDateInfo = DEFAULT_DATE_DISPLAY_DATA.find(function (uiDateInfo) {
      return uiDateInfo.label === label;
    });
    return uiDateInfo || defaultUIDateInfo;
  };
  var CountdownClockHeader = function CountdownClockHeader() {
    return (
      /*#__PURE__*/_react["default"].createElement("section", {
        className: "row mt-4"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "col"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "d-flex flex-column p-2 "
      }, /*#__PURE__*/_react["default"].createElement("h1", null, "Countdown Clock"), /*#__PURE__*/_react["default"].createElement("p", null, "The ", /*#__PURE__*/_react["default"].createElement("i", null, "Countdown Clock"), " will display the amount of days, hours, minutes and seconds until the next annual instance of a date. Like Christmas, Thanksgiving or Boxing Day."))))
    );
  };
  _c = CountdownClockHeader;
  var CountdownClockDisplay = function CountdownClockDisplay(_ref) {
    var displayTime = _ref.displayTime, _ref$holiday = _ref.holiday, holiday = _ref$holiday === void 0 ? 'Your custom date' : _ref$holiday, _date = _ref._date;
    var weekday = (0, _calculateDuration.getWeekDay)(_date);
    var friendlyDate = ("").concat(_date.getMonth() + 1, "/").concat(_date.getDate(), "/").concat(_date.getFullYear());
    return (
      /*#__PURE__*/_react["default"].createElement("div", {
        className: "text-center"
      }, /*#__PURE__*/_react["default"].createElement("h2", {
        className: "display-1 display-large"
      }, displayTime.clockValue), /*#__PURE__*/_react["default"].createElement("h5", null, "Until: ", holiday), /*#__PURE__*/_react["default"].createElement("small", null, "Which is on ", weekday, ",(", friendlyDate, "), by the way!"))
    );
  };
  _c2 = CountdownClockDisplay;
  var CountdownClockSelectorButton = function CountdownClockSelectorButton(_ref2) {
    var title = _ref2.title, label = _ref2.label, chooseDate = _ref2.chooseDate;
    var uiData = getDateUIData(label);
    return (
      /*#__PURE__*/_react["default"].createElement("button", {
        className: ("btn btn-").concat(uiData.classColorName, " mx-2 mt-2 px-5 "),
        onClick: chooseDate,
        value: label
      }, uiData.title)
    );
  };
  _c3 = CountdownClockSelectorButton;
  var CountdownClockSelectorButtons = function CountdownClockSelectorButtons(_ref3) {
    var presetDates = _ref3.presetDates, chooseDate = _ref3.chooseDate;
    var dateKeys = Object.keys(presetDates);
    var dateButtons = dateKeys.map(function (dateKey, i) {
      var dateInfo = presetDates[dateKey];
      return (
        /*#__PURE__*/_react["default"].createElement(CountdownClockSelectorButton, {
          key: i,
          label: dateInfo.label,
          title: dateInfo.title,
          chooseDate: chooseDate
        })
      );
    });
    return (
      /*#__PURE__*/_react["default"].createElement("div", null, dateButtons)
    );
  };
  _c4 = CountdownClockSelectorButtons;
  var CountdownClockSelectorSection = function CountdownClockSelectorSection(_ref4) {
    var presetDates = _ref4.presetDates, chooseDate = _ref4.chooseDate;
    return (
      /*#__PURE__*/_react["default"].createElement("div", {
        className: "text-center"
      }, /*#__PURE__*/_react["default"].createElement(CountdownClockSelectorButtons, {
        presetDates: presetDates,
        chooseDate: chooseDate
      }))
    );
  };
  _c5 = CountdownClockSelectorSection;
  var CountdownClockBody = function CountdownClockBody(_ref5) {
    var displayTime = _ref5.displayTime, _date = _ref5._date, holidayUIData = _ref5.holidayUIData, presetDates = _ref5.presetDates, chooseDate = _ref5.chooseDate;
    return (
      /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(CountdownClockSelectorSection, {
        presetDates: presetDates,
        chooseDate: chooseDate
      }), /*#__PURE__*/_react["default"].createElement(CountdownClockDisplay, {
        holiday: holidayUIData.title,
        _date: _date,
        displayTime: displayTime
      }))
    );
  };
  _c6 = CountdownClockBody;
  function CountdownClock() {
    _s2();
    var _useState = (0, _react.useState)(DEFAULT_DATES.christmas), _useState2 = _slicedToArray(_useState, 2), _date = _useState2[0], setDate = _useState2[1];
    var _useState3 = (0, _react.useState)((0, _calculateDuration.createDisplayTime)(_date.date)), _useState4 = _slicedToArray(_useState3, 2), displayTime = _useState4[0], setDisplayTime = _useState4[1];
    var chooseDate = function chooseDate(e) {
      var chosenDateLabel = e.target.value;
      for (var key in DEFAULT_DATES) {
        var fnLocalDate = DEFAULT_DATES[key];
        if (fnLocalDate.label === chosenDateLabel) {
          setDate(fnLocalDate);
          setDisplayTime((0, _calculateDuration.createDisplayTime)(fnLocalDate.date));
          return;
        }
      }
    };
    var tick = function tick() {
      setDisplayTime((0, _calculateDuration.createDisplayTime)(_date.date));
    };
    (0, _react.useEffect)(function () {
      var timer = setInterval(tick, 1000);
      return function () {
        return clearInterval(timer);
      };
    });
    var holidayUIData = getDateUIData(_date.label);
    return (
      /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(CountdownClockHeader, null), /*#__PURE__*/_react["default"].createElement("hr", null), /*#__PURE__*/_react["default"].createElement(CountdownClockBody, {
        _date: _date.date,
        holidayUIData: holidayUIData,
        displayTime: displayTime,
        presetDates: DEFAULT_DATES,
        chooseDate: chooseDate
      }))
    );
  }
  _s2(CountdownClock, "7YdCg3dBHAwTkEE3MdIX7HLzvxI=");
  _c7 = CountdownClock;
  var _default = CountdownClock;
  exports["default"] = _default;
  var _c, _c2, _c3, _c4, _c5, _c6, _c7;
  $RefreshReg$(_c, "CountdownClockHeader");
  $RefreshReg$(_c2, "CountdownClockDisplay");
  $RefreshReg$(_c3, "CountdownClockSelectorButton");
  $RefreshReg$(_c4, "CountdownClockSelectorButtons");
  $RefreshReg$(_c5, "CountdownClockSelectorSection");
  $RefreshReg$(_c6, "CountdownClockBody");
  $RefreshReg$(_c7, "CountdownClock");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
